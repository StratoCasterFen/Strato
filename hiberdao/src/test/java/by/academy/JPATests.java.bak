package by.academy;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.dbunit.Assertion;
import org.dbunit.dataset.IDataSet;
//import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import by.academy.pojos.Role;
import by.academy.pojos.User;
import config.DBUnitConfig;


public class JPATests extends DBUnitConfig{

	private static Logger logger = LogManager.getLogger(JPATests.class.getName());
    EntityManagerFactory emf;
    EntityManager em;
    
    public JPATests(String name) {
		super(name);
	}

    @Before
    public void setUp() throws Exception {
    	//logger.info("init");
        emf = Persistence.createEntityManagerFactory("hiberpolice_test");
        em = emf.createEntityManager();
        
        beforeData = new FlatXmlDataSetBuilder().build(
                Thread.currentThread().getContextClassLoader()
                .getResourceAsStream("by/academy/user-data.xml"));
        
        tester.setDataSet(beforeData);
        tester.onSetup();
    }
    
    @Test
    public void testGetAll() throws Exception {
    	   	
    //    List<User> users = em.createNativeQuery("User.getAll", User.class).getResultList();
        List users = em.createQuery("SELECT u FROM User u").getResultList();
        
        IDataSet expectedData = new FlatXmlDataSetBuilder().build(
                                Thread.currentThread().getContextClassLoader()
                                .getResourceAsStream("entity/user-data.xml"));
 
        IDataSet actualData = tester.getConnection().createDataSet();
        Assertion.assertEquals(expectedData, actualData);
        Assert.assertEquals(expectedData.getTable("users").getRowCount(),users.size());
    }
    
    @Test
    public void saveTest() throws Exception {
	//	logger.info("saveTest");
		persistSimplePOJO();
		try {
			List results = em.createQuery("SELECT COUNT(u) FROM User u").getResultList();
			long size = results.isEmpty() ? 0 : (Long) results.get(0);
			org.junit.Assert.assertEquals(6l, size);
		} catch (Exception e) {
	//		logger.error("cant to perform result",e);
		}

	}
    
//    @Test
//    public void manyToManyTest() {
//        persistSimplePOJO();
//    //    logger.info("saveTest");
//        User user = em.find(User.class, 1l);
//      //  logger.info(user.getUser_role().size());
//        assertEquals(2, user.getUser_role().size());
//    }
 
    
    @After
    public void destroy() {
        em.close();
        emf.close();
    }
    
    public void persistSimplePOJO() {
  //  	logger.info("persistSimplePOJO");
        EntityTransaction tx = em.getTransaction();
        tx.begin();
    //	logger.info("persist");
    	User user=getUser();
        em.persist(user);
        tx.commit();
    }
    
    public User getUser() {
    //	logger.info("getUser");
        User user = new User();
        user.setUserName("Dgordano");
        user.setPassword("fhjfhfhg4df4g654dfg65");

        List<Role> role = new ArrayList<Role>();
        role.add(new Role("Admin"));
        role.add(new Role("Guest"));

        user.setUser_role(role);
 //       logger.info("get "+user);
        return user;
    }
}
